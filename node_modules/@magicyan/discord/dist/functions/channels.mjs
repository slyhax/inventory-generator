import { ChannelType } from 'discord.js';

function findChannel(guild, type) {
  const channelType = type ?? ChannelType.GuildText;
  const cache = guild.channels.cache;
  return {
    byId(id) {
      return cache.find(
        (c) => c.id === id && c.type === channelType
      );
    },
    byName(name, and = () => true) {
      return cache.find(
        (c) => c.name === name && c.type === channelType && and(c)
      );
    },
    byFilter(filter) {
      return cache.find((c) => c.type == type && filter(c));
    },
    inCategoryId(id) {
      return {
        byId(id2) {
          return cache.find(
            (c) => c.id === id2 && c.type === channelType && c.parentId == id2
          );
        },
        byName(name, and = () => true) {
          return cache.find(
            (c) => c.name === name && c.type === channelType && c.parentId == id && and(c)
          );
        },
        byFilter(filter) {
          return cache.find(
            (c) => c.type === channelType && c.parent?.id == id && filter(c)
          );
        }
      };
    },
    inCategoryName(name) {
      return {
        byId(id) {
          return cache.find(
            (c) => c.id === id && c.type === channelType && c.parent?.name == name
          );
        },
        byName(name2, and = () => true) {
          return cache.find(
            (c) => c.name === name2 && c.type === channelType && c.parent?.name == name2 && and(c)
          );
        },
        byFilter(filter) {
          return cache.find(
            (c) => c.type === channelType && c.parent?.name == name && filter(c)
          );
        }
      };
    }
  };
}
function getChannelUrlInfo(url) {
  const regex = new RegExp(/^https:\/\/discord\.com\/channels\/\d+\/\d+$/);
  if (!regex.test(url))
    return {};
  const [channelId, guildId] = url.split("/").reverse();
  return { channelId, guildId };
}

export { findChannel, getChannelUrlInfo };
