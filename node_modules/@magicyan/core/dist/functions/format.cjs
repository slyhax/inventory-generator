'use strict';

function notFound(value) {
  return value !== null ? value : void 0;
}
function brBuilder(...text) {
  return text.flat().filter(nonNullish).join("\n");
}
function spaceBuilder(...text) {
  return text.flat().filter(nonNullish).join(" ");
}
function replaceText(text, replaces) {
  let result = String(text);
  for (const prop in replaces) {
    result = result.replaceAll(prop, replaces[prop]);
  }
  return result;
}
function captalize(word, allWords = false) {
  word = word.trim();
  if (!word)
    return word;
  return allWords ? word.split(" ").map((word2) => captalize(word2)).join(" ") : word[0].toUpperCase() + word.slice(1).toLowerCase();
}
function limitText(text, maxLength, endText = "") {
  return text.length >= maxLength ? text.slice(0, maxLength) + endText : text;
}
function nonNullish(v) {
  return v !== null && v !== void 0;
}

exports.brBuilder = brBuilder;
exports.captalize = captalize;
exports.limitText = limitText;
exports.notFound = notFound;
exports.replaceText = replaceText;
exports.spaceBuilder = spaceBuilder;
