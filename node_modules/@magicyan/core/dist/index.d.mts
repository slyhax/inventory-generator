type Color = `#${string}` | string;
/**
 * Converts a hexadecimal color string to a numeric RGB representation.
 *
 * @param color - The hexadecimal color string (with or without `#`).
 * @returns The RGB color as a number.
 *
 * @example
 * ```ts
 * const rgb = hexToRgb("#FF5733");
 * console.log(rgb); // Output: 16724755
 *
 * const rgbNoHash = hexToRgb("FF5733");
 * console.log(rgbNoHash); // Output: 16724755
 * ```
 */
declare function hexToRgb(color: Color): number;
/**
 * Converts an RGB color value to a hexadecimal string.
 *
 * @param rgb - The RGB color value as a number.
 * @param includeHash - Whether to include the `#` prefix in the returned hexadecimal string. Default is `true`.
 * @returns The hexadecimal color string, optionally prefixed with `#`.
 *
 * @example
 * ```ts
 * const hexColor = rgbToHex(16724755);
 * console.log(hexColor); // Output: "#ff5733"
 *
 * const hexColorWithoutHash = rgbToHex(16724755, false);
 * console.log(hexColorWithoutHash); // Output: "ff5733"
 * ```
 */
declare function rgbToHex(rgb: number, includeHash?: boolean): string;

type MaybeString = string | null | undefined;
/**
 * Returns the given value if it is not `null`; otherwise, returns `undefined`.
 *
 * @param value - The value to be checked for `null`.
 * @returns The original value if it is not `null`, or `undefined` if it is.
 *
 * @example
 * ```ts
 * const result = notFound("Hello");
 * console.log(result); // Output: "Hello"
 *
 * const notFoundResult = notFound(null);
 * console.log(notFoundResult); // Output: undefined
 * ```
 */
declare function notFound<T>(value: T): T & {} | undefined;
/**
 * Joins multiple strings or arrays of strings into a single string, separated by line breaks.
 * Filters out any `null` or `undefined` values.
 *
 * @param text - The text segments to be joined. Each segment can be a string, an array of strings, or `null`/`undefined`.
 * @returns The concatenated string with each segment separated by a line break.
 *
 * @example
 * ```ts
 * const result = brBuilder("Hello", [null, "World"], undefined, "!");
 * console.log(result);
 * // Output:
 * // Hello
 * // World
 * // !
 * ```
 */
declare function brBuilder(...text: (MaybeString | MaybeString[])[]): string;
/**
 * Joins multiple strings or arrays of strings into a single string, separated by spaces.
 * Filters out any `null` or `undefined` values.
 *
 * @param text - The text segments to be joined. Each segment can be a string, an array of strings, or `null`/`undefined`.
 * @returns The concatenated string with each segment separated by a space.
 *
 * @example
 * ```ts
 * const result = spaceBuilder("Hello", [null, "World"], undefined, "!");
 * console.log(result); // Output: "Hello World !"
 * ```
 */
declare function spaceBuilder(...text: (MaybeString | MaybeString[])[]): string;
/**
 * Replaces occurrences of specified substrings within a text string based on a set of key-value pairs.
 * Each key in the `replaces` object is replaced with its corresponding value in the text.
 *
 * @param text - The original text where replacements will be made.
 * @param replaces - An object containing the substrings to replace (as keys) and their replacement values.
 * @returns The modified text with all specified replacements applied.
 *
 * @example
 * ```ts
 * // lang.json
 * {
 *     "welcome": {
 *         "en-US": "Hi var(name), welcome to var(libname) lib",
 *         "pt-BR": "Olá var(name), seja bem vindo à lib var(libname)"
 *     }
 * }
 * // command.ts
 * import lang from "./lang"
 * // ...
 * replaceText(lang.welcome[locale], {
 *     "var(name)": user.displayName,
 *     "var(libname)": lib.getName()
 * })
 * ```
 */
declare function replaceText<R extends Record<string, any>>(text: string, replaces: R): string;
/**
 * Capitalizes the first letter of a word and converts the remaining letters to lowercase.
 * If `allWords` is true, capitalizes the first letter of each word in the string.
 *
 * @param word - The word or sentence to be capitalized.
 * @param allWords - Whether all words should be capitalized individually. Default is `false`.
 * @returns The capitalized word or sentence.
 *
 * @example
 * ```ts
 * const capitalizedWord = captalize("hello");
 * console.log(capitalizedWord); // Output: "Hello"
 *
 * const capitalizedText = captalize("i love brazil", true);
 * console.log(capitalizedText); // Output: "I Love Brazil"
 * ```
 */
declare function captalize(word: string, allWords?: boolean): string;
/**
 * Limits the length of a given text to a specified maximum length,
 * optionally appending additional text if the limit is exceeded.
 *
 * @param text - The original text to be truncated if necessary.
 * @param maxLength - The maximum length of the returned text.
 * @param endText - The text to append to the truncated text, if the limit is exceeded. Default is an empty string.
 * @returns The truncated text with optional appended text.
 *
 * @example
 * ```ts
 * const shortText = limitText("Hello World", 5);
 * console.log(shortText); // Output: "Hello"
 *
 * const truncatedText = limitText("Hello World", 5, "...");
 * console.log(truncatedText); // Output: "Hello..."
 * ```
 */
declare function limitText(text: string, maxLength: number, endText?: string): string;

declare function randomNumber(min: number, max: number): number;
declare const random: {
    int(min: number, max: number): number;
    float(min: number, max: number): number;
};
declare function parseIntOrDefault(value: string, defaultValue: number, radix?: number): number;
declare function parseFloatOrDefault(value: string, defaultValue: number): number;

type SetTimeoutFunction = (delay: number) => Promise<void>;
type Sleep = SetTimeoutFunction & {
    seconds: SetTimeoutFunction;
    minutes: SetTimeoutFunction;
};
/**
 * ```ts
 * await sleep(100); // wait 100 ms
 * await sleep.seconds(5); // wait 5000 ms
 * await sleep.minutes(2); // wait 120000 ms
 * ```
 */
declare const sleep: Sleep;

interface CreateIntervalOptions {
    time: number;
    immediately?: boolean;
    run(stop: () => void): void;
}
declare function createInterval(options: CreateIntervalOptions): {
    timer: NodeJS.Timeout;
    stop: () => void;
};
interface CreateTimeoutOptions {
    delay: number;
    run(): void;
}
declare function createTimeout(options: CreateTimeoutOptions): {
    timer: NodeJS.Timeout;
    stop: () => void;
};
interface CreateLoopIntervalOptions<T> {
    array: T[];
    time: number;
    immediately?: boolean;
    run(value: T, stop: () => void, lap: number, array: T[]): void;
}
declare function createLoopInterval<T>(options: CreateLoopIntervalOptions<T>): {
    timer: NodeJS.Timeout;
    stop: () => void;
};

/**
 * Compares two strings for equality, ignoring case differences.
 *
 * @param text1 - The first string to compare.
 * @param text2 - The second string to compare.
 * @returns `true` if the strings are equal, ignoring case; otherwise, `false`.
 *
 * @example
 * ```ts
 * const isEqual = equalsIgnoreCase("Hello", "hello");
 * console.log(isEqual); // Output: true
 *
 * const isNotEqual = equalsIgnoreCase("Hello", "world");
 * console.log(isNotEqual); // Output: false
 * ```
 */
declare function equalsIgnoreCase(text1: string, text2: string): boolean;
/**
 * Checks if a string contains a specified substring, ignoring case differences.
 *
 * @param text - The string to search within.
 * @param includeText - The substring to search for.
 * @returns `true` if the substring is found within the string, ignoring case; otherwise, `false`.
 *
 * @example
 * ```ts
 * const contains = includesIgnoreCase("Hello World", "hello");
 * console.log(contains); // Output: true
 *
 * const notContains = includesIgnoreCase("Hello World", "bye");
 * console.log(notContains); // Output: false
 * ```
 */
declare function includesIgnoreCase(text: string, includeText: string): boolean;

/**
 * Validates if the given string is a valid email address.
 *
 * @param email - The email address to validate.
 * @returns `true` if the email is valid, otherwise `false`.
 *
 * @example
 * ```ts
 * const validEmail = isEmail("example@domain.com");
 * console.log(validEmail); // Output: true
 *
 * const invalidEmail = isEmail("example@domain");
 * console.log(invalidEmail); // Output: false
 * ```
 */
declare function isEmail(email: string): boolean;
/**
 * Validates if the given string is a valid URL.
 *
 * @param url - The URL to validate.
 * @returns `true` if the URL is valid, otherwise `false`.
 *
 * @example
 * ```ts
 * const validUrl = isUrl("https://example.com");
 * console.log(validUrl); // Output: true
 *
 * const invalidUrl = isUrl("example.com");
 * console.log(invalidUrl); // Output: false
 * ```
 */
declare function isUrl(url: string): boolean;
/**
 * Checks if the given string is numeric (contains only digits).
 *
 * @param text - The text to check.
 * @returns `true` if the text is numeric, otherwise `false`.
 *
 * @example
 * ```ts
 * const isNumericText = isNumeric("12345");
 * console.log(isNumericText); // Output: true
 *
 * const isNotNumericText = isNumeric("123a45");
 * console.log(isNotNumericText); // Output: false
 * ```
 */
declare function isNumeric(text: string): boolean;

export { brBuilder, captalize, createInterval, createLoopInterval, createTimeout, equalsIgnoreCase, hexToRgb, includesIgnoreCase, isEmail, isNumeric, isUrl, limitText, notFound, parseFloatOrDefault, parseIntOrDefault, random, randomNumber, replaceText, rgbToHex, sleep, spaceBuilder };
